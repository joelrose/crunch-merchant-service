// Code generated by MockGen. DO NOT EDIT.
// Source: services/http_client/http_client.go

// Package mock_http_client is a generated GoMock package.
package mock_http_client

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCustomHttpClient is a mock of CustomHttpClient interface.
type MockCustomHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockCustomHttpClientMockRecorder
}

// MockCustomHttpClientMockRecorder is the mock recorder for MockCustomHttpClient.
type MockCustomHttpClientMockRecorder struct {
	mock *MockCustomHttpClient
}

// NewMockCustomHttpClient creates a new mock instance.
func NewMockCustomHttpClient(ctrl *gomock.Controller) *MockCustomHttpClient {
	mock := &MockCustomHttpClient{ctrl: ctrl}
	mock.recorder = &MockCustomHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomHttpClient) EXPECT() *MockCustomHttpClientMockRecorder {
	return m.recorder
}

// SendPost mocks base method.
func (m *MockCustomHttpClient) SendPost(requestBody []byte, url string, headers map[string]string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendPost", requestBody, url, headers)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendPost indicates an expected call of SendPost.
func (mr *MockCustomHttpClientMockRecorder) SendPost(requestBody, url, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendPost", reflect.TypeOf((*MockCustomHttpClient)(nil).SendPost), requestBody, url, headers)
}
